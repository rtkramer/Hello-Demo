{"ast":null,"code":"import React,{useState}from'react';import{Card}from'primereact/card';import{InputText}from'primereact/inputtext';import{Button}from'primereact/button';import{InputTextarea}from'primereact/inputtextarea';import{convertFigmaToPrimeReact,extractFigmaFileKey,extractNodeId}from'../utils/figmaToPrimeReact';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const FigmaComponentBuilder=()=>{const[figmaUrl,setFigmaUrl]=useState('');const[figmaData,setFigmaData]=useState(null);const[generatedComponent,setGeneratedComponent]=useState('');const[loading,setLoading]=useState(false);const[error,setError]=useState('');const[mcpStatus,setMcpStatus]=useState('checking');const handleFigmaUrlChange=e=>{setFigmaUrl(e.target.value);setError('');};const extractFigmaInfo=()=>{const fileKey=extractFigmaFileKey(figmaUrl);const nodeId=extractNodeId(figmaUrl);if(!fileKey){setError('Invalid Figma URL. Please provide a valid Figma file URL.');return null;}return{fileKey,nodeId};};const fetchFigmaData=async()=>{setLoading(true);setError('');try{const figmaInfo=extractFigmaInfo();if(!figmaInfo){setLoading(false);return;}console.log('Fetching Figma data via MCP for:',figmaInfo);// Use the Figma Developer MCP server\nconst mcpResponse=await fetch('http://localhost:3333/mcp',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({jsonrpc:'2.0',id:1,method:'tools/call',params:{name:'get_figma_file',arguments:{file_key:figmaInfo.fileKey}}})});if(!mcpResponse.ok){throw new Error(`MCP Server error: ${mcpResponse.status} ${mcpResponse.statusText}`);}const mcpData=await mcpResponse.json();if(mcpData.error){throw new Error(`MCP Error: ${mcpData.error.message}`);}if(!mcpData.result||!mcpData.result.content){throw new Error('No data received from MCP server');}const figmaData=JSON.parse(mcpData.result.content[0].text);// If we have a specific node ID, get that node's data\nif(figmaInfo.nodeId){const nodeMcpResponse=await fetch('http://localhost:3333/mcp',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({jsonrpc:'2.0',id:2,method:'tools/call',params:{name:'get_figma_node',arguments:{file_key:figmaInfo.fileKey,node_id:figmaInfo.nodeId}}})});if(nodeMcpResponse.ok){const nodeMcpData=await nodeMcpResponse.json();if(nodeMcpData.result&&nodeMcpData.result.content){const nodeData=JSON.parse(nodeMcpData.result.content[0].text);if(nodeData){setFigmaData(nodeData);generateComponent(nodeData);return;}}}}// Fallback to the main document\nsetFigmaData(figmaData.document);generateComponent(figmaData.document);}catch(err){setError(`Failed to fetch Figma data via MCP: ${err.message}. Make sure the MCP server is running.`);console.error('Error fetching Figma data:',err);}finally{setLoading(false);}};const generateComponent=data=>{try{const component=convertFigmaToPrimeReact(data);// Convert React element to string representation\nconst componentString=`\nimport React from 'react';\nimport { ${getRequiredImports(data)} } from 'primereact/primereact';\n\nexport const GeneratedComponent = () => {\n  return (\n    ${componentToJSX(component)}\n  );\n};\n      `.trim();setGeneratedComponent(componentString);}catch(err){setError('Failed to generate component. Please check the Figma data.');console.error('Error generating component:',err);}};const getRequiredImports=data=>{const imports=new Set();const extractImports=node=>{if(node.type==='RECTANGLE'){if(node.name.toLowerCase().includes('button'))imports.add('Button');if(node.name.toLowerCase().includes('input'))imports.add('InputText');}if(node.type==='FRAME'&&node.name.toLowerCase().includes('card')){imports.add('Card');}if(node.children){node.children.forEach(extractImports);}};extractImports(data);return Array.from(imports).join(', ');};const componentToJSX=component=>{// This is a simplified conversion - in a real implementation,\n// you'd need a more sophisticated React element to JSX string converter\nreturn'<div>Generated Component</div>';};const copyToClipboard=()=>{navigator.clipboard.writeText(generatedComponent);};// Check MCP server status on component mount\nReact.useEffect(()=>{const checkMcpStatus=async()=>{try{const response=await fetch('http://localhost:3333/health');if(response.ok){setMcpStatus('connected');}else{setMcpStatus('error');}}catch(error){setMcpStatus('error');}};checkMcpStatus();},[]);return/*#__PURE__*/_jsxs(\"div\",{className:\"p-4\",children:[/*#__PURE__*/_jsxs(Card,{title:\"Figma to PrimeReact Component Builder\",className:\"mb-4\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"mb-3\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex align-items-center gap-2\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"text-sm font-medium\",children:\"MCP Server Status:\"}),mcpStatus==='checking'&&/*#__PURE__*/_jsxs(\"span\",{className:\"flex align-items-center gap-1 text-blue-600\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"pi pi-spin pi-spinner\"}),\"Checking...\"]}),mcpStatus==='connected'&&/*#__PURE__*/_jsxs(\"span\",{className:\"flex align-items-center gap-1 text-green-600\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"pi pi-check-circle\"}),\"Connected\"]}),mcpStatus==='error'&&/*#__PURE__*/_jsxs(\"span\",{className:\"flex align-items-center gap-1 text-red-600\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"pi pi-exclamation-triangle\"}),\"Not Connected\"]})]}),mcpStatus==='error'&&/*#__PURE__*/_jsx(\"p\",{className:\"text-xs text-red-600 mt-1\",children:\"Make sure the Figma Developer MCP server is running on port 3333\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"grid\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"col-12\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"figmaUrl\",className:\"block text-sm font-medium mb-2\",children:\"Figma URL\"}),/*#__PURE__*/_jsx(InputText,{id:\"figmaUrl\",value:figmaUrl,onChange:handleFigmaUrlChange,placeholder:\"https://figma.com/file/...\",className:\"w-full mb-3\"}),/*#__PURE__*/_jsx(Button,{label:\"Fetch Figma Data\",onClick:fetchFigmaData,loading:loading,disabled:!figmaUrl,className:\"mb-3\"})]})}),error&&/*#__PURE__*/_jsxs(\"div\",{className:\"p-3 mb-3 border-round surface-100 border-1 border-red-200 bg-red-50\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"pi pi-exclamation-triangle text-red-500 mr-2\"}),error]}),figmaData&&/*#__PURE__*/_jsxs(\"div\",{className:\"grid\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"col-12 md:col-6\",children:/*#__PURE__*/_jsx(Card,{title:\"Figma Data\",className:\"h-full\",children:/*#__PURE__*/_jsx(\"pre\",{className:\"text-xs overflow-auto\",style:{maxHeight:'300px'},children:JSON.stringify(figmaData,null,2)})})}),/*#__PURE__*/_jsx(\"div\",{className:\"col-12 md:col-6\",children:/*#__PURE__*/_jsx(Card,{title:\"Generated PrimeReact Component\",className:\"h-full\",header:/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-content-between align-items-center\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"Generated Component\"}),/*#__PURE__*/_jsx(Button,{icon:\"pi pi-copy\",onClick:copyToClipboard,size:\"small\",text:true})]}),children:/*#__PURE__*/_jsx(InputTextarea,{value:generatedComponent,readOnly:true,rows:15,className:\"w-full font-mono text-xs\"})})})]})]}),/*#__PURE__*/_jsx(Card,{title:\"How to Use\",className:\"mb-4\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"grid\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"col-12 md:col-6\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Step 1: Get Figma URL\"}),/*#__PURE__*/_jsxs(\"p\",{className:\"text-sm text-600\",children:[\"1. Open your Figma design\",/*#__PURE__*/_jsx(\"br\",{}),\"2. Select the component you want to convert\",/*#__PURE__*/_jsx(\"br\",{}),\"3. Copy the URL from your browser\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"col-12 md:col-6\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Step 2: Generate Component\"}),/*#__PURE__*/_jsxs(\"p\",{className:\"text-sm text-600\",children:[\"1. Paste the Figma URL above\",/*#__PURE__*/_jsx(\"br\",{}),\"2. Click \\\"Fetch Figma Data\\\"\",/*#__PURE__*/_jsx(\"br\",{}),\"3. Review the generated PrimeReact component\"]})]})]})}),/*#__PURE__*/_jsx(Card,{title:\"Supported Components\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"grid\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"col-12 md:col-4\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Basic Components\"}),/*#__PURE__*/_jsxs(\"ul\",{className:\"text-sm\",children:[/*#__PURE__*/_jsx(\"li\",{children:\"Buttons (with variants)\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Input fields\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Text elements\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Cards\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"col-12 md:col-4\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Layout Components\"}),/*#__PURE__*/_jsxs(\"ul\",{className:\"text-sm\",children:[/*#__PURE__*/_jsx(\"li\",{children:\"Frames\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Groups\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Containers\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"col-12 md:col-4\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Styling\"}),/*#__PURE__*/_jsxs(\"ul\",{className:\"text-sm\",children:[/*#__PURE__*/_jsx(\"li\",{children:\"Colors and fills\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Borders and strokes\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Shadows and effects\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Typography\"})]})]})]})})]});};export default FigmaComponentBuilder;","map":{"version":3,"names":["React","useState","Card","InputText","Button","InputTextarea","convertFigmaToPrimeReact","extractFigmaFileKey","extractNodeId","jsx","_jsx","jsxs","_jsxs","FigmaComponentBuilder","figmaUrl","setFigmaUrl","figmaData","setFigmaData","generatedComponent","setGeneratedComponent","loading","setLoading","error","setError","mcpStatus","setMcpStatus","handleFigmaUrlChange","e","target","value","extractFigmaInfo","fileKey","nodeId","fetchFigmaData","figmaInfo","console","log","mcpResponse","fetch","method","headers","body","JSON","stringify","jsonrpc","id","params","name","arguments","file_key","ok","Error","status","statusText","mcpData","json","message","result","content","parse","text","nodeMcpResponse","node_id","nodeMcpData","nodeData","generateComponent","document","err","data","component","componentString","getRequiredImports","componentToJSX","trim","imports","Set","extractImports","node","type","toLowerCase","includes","add","children","forEach","Array","from","join","copyToClipboard","navigator","clipboard","writeText","useEffect","checkMcpStatus","response","className","title","htmlFor","onChange","placeholder","label","onClick","disabled","style","maxHeight","header","icon","size","readOnly","rows"],"sources":["/Users/richardkramer/Sites/prime-react/src/components/FigmaComponentBuilder.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Card } from 'primereact/card';\nimport { InputText } from 'primereact/inputtext';\nimport { Button } from 'primereact/button';\nimport { InputTextarea } from 'primereact/inputtextarea';\nimport { convertFigmaToPrimeReact, extractFigmaFileKey, extractNodeId } from '../utils/figmaToPrimeReact';\n\nconst FigmaComponentBuilder = () => {\n  const [figmaUrl, setFigmaUrl] = useState('');\n  const [figmaData, setFigmaData] = useState(null);\n  const [generatedComponent, setGeneratedComponent] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [mcpStatus, setMcpStatus] = useState('checking');\n\n  const handleFigmaUrlChange = (e) => {\n    setFigmaUrl(e.target.value);\n    setError('');\n  };\n\n  const extractFigmaInfo = () => {\n    const fileKey = extractFigmaFileKey(figmaUrl);\n    const nodeId = extractNodeId(figmaUrl);\n    \n    if (!fileKey) {\n      setError('Invalid Figma URL. Please provide a valid Figma file URL.');\n      return null;\n    }\n    \n    return { fileKey, nodeId };\n  };\n\n  const fetchFigmaData = async () => {\n    setLoading(true);\n    setError('');\n    \n    try {\n      const figmaInfo = extractFigmaInfo();\n      if (!figmaInfo) {\n        setLoading(false);\n        return;\n      }\n\n      console.log('Fetching Figma data via MCP for:', figmaInfo);\n      \n      // Use the Figma Developer MCP server\n      const mcpResponse = await fetch('http://localhost:3333/mcp', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          id: 1,\n          method: 'tools/call',\n          params: {\n            name: 'get_figma_file',\n            arguments: {\n              file_key: figmaInfo.fileKey\n            }\n          }\n        })\n      });\n\n      if (!mcpResponse.ok) {\n        throw new Error(`MCP Server error: ${mcpResponse.status} ${mcpResponse.statusText}`);\n      }\n\n      const mcpData = await mcpResponse.json();\n      \n      if (mcpData.error) {\n        throw new Error(`MCP Error: ${mcpData.error.message}`);\n      }\n\n      if (!mcpData.result || !mcpData.result.content) {\n        throw new Error('No data received from MCP server');\n      }\n\n      const figmaData = JSON.parse(mcpData.result.content[0].text);\n      \n      // If we have a specific node ID, get that node's data\n      if (figmaInfo.nodeId) {\n        const nodeMcpResponse = await fetch('http://localhost:3333/mcp', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            jsonrpc: '2.0',\n            id: 2,\n            method: 'tools/call',\n            params: {\n              name: 'get_figma_node',\n              arguments: {\n                file_key: figmaInfo.fileKey,\n                node_id: figmaInfo.nodeId\n              }\n            }\n          })\n        });\n\n        if (nodeMcpResponse.ok) {\n          const nodeMcpData = await nodeMcpResponse.json();\n          if (nodeMcpData.result && nodeMcpData.result.content) {\n            const nodeData = JSON.parse(nodeMcpData.result.content[0].text);\n            if (nodeData) {\n              setFigmaData(nodeData);\n              generateComponent(nodeData);\n              return;\n            }\n          }\n        }\n      }\n\n      // Fallback to the main document\n      setFigmaData(figmaData.document);\n      generateComponent(figmaData.document);\n      \n    } catch (err) {\n      setError(`Failed to fetch Figma data via MCP: ${err.message}. Make sure the MCP server is running.`);\n      console.error('Error fetching Figma data:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const generateComponent = (data) => {\n    try {\n      const component = convertFigmaToPrimeReact(data);\n      \n      // Convert React element to string representation\n      const componentString = `\nimport React from 'react';\nimport { ${getRequiredImports(data)} } from 'primereact/primereact';\n\nexport const GeneratedComponent = () => {\n  return (\n    ${componentToJSX(component)}\n  );\n};\n      `.trim();\n      \n      setGeneratedComponent(componentString);\n    } catch (err) {\n      setError('Failed to generate component. Please check the Figma data.');\n      console.error('Error generating component:', err);\n    }\n  };\n\n  const getRequiredImports = (data) => {\n    const imports = new Set();\n    \n    const extractImports = (node) => {\n      if (node.type === 'RECTANGLE') {\n        if (node.name.toLowerCase().includes('button')) imports.add('Button');\n        if (node.name.toLowerCase().includes('input')) imports.add('InputText');\n      }\n      if (node.type === 'FRAME' && node.name.toLowerCase().includes('card')) {\n        imports.add('Card');\n      }\n      if (node.children) {\n        node.children.forEach(extractImports);\n      }\n    };\n    \n    extractImports(data);\n    return Array.from(imports).join(', ');\n  };\n\n  const componentToJSX = (component) => {\n    // This is a simplified conversion - in a real implementation,\n    // you'd need a more sophisticated React element to JSX string converter\n    return '<div>Generated Component</div>';\n  };\n\n  const copyToClipboard = () => {\n    navigator.clipboard.writeText(generatedComponent);\n  };\n\n  // Check MCP server status on component mount\n  React.useEffect(() => {\n    const checkMcpStatus = async () => {\n      try {\n        const response = await fetch('http://localhost:3333/health');\n        if (response.ok) {\n          setMcpStatus('connected');\n        } else {\n          setMcpStatus('error');\n        }\n      } catch (error) {\n        setMcpStatus('error');\n      }\n    };\n\n    checkMcpStatus();\n  }, []);\n\n  return (\n    <div className=\"p-4\">\n      <Card title=\"Figma to PrimeReact Component Builder\" className=\"mb-4\">\n        {/* MCP Server Status */}\n        <div className=\"mb-3\">\n          <div className=\"flex align-items-center gap-2\">\n            <span className=\"text-sm font-medium\">MCP Server Status:</span>\n            {mcpStatus === 'checking' && (\n              <span className=\"flex align-items-center gap-1 text-blue-600\">\n                <i className=\"pi pi-spin pi-spinner\"></i>\n                Checking...\n              </span>\n            )}\n            {mcpStatus === 'connected' && (\n              <span className=\"flex align-items-center gap-1 text-green-600\">\n                <i className=\"pi pi-check-circle\"></i>\n                Connected\n              </span>\n            )}\n            {mcpStatus === 'error' && (\n              <span className=\"flex align-items-center gap-1 text-red-600\">\n                <i className=\"pi pi-exclamation-triangle\"></i>\n                Not Connected\n              </span>\n            )}\n          </div>\n          {mcpStatus === 'error' && (\n            <p className=\"text-xs text-red-600 mt-1\">\n              Make sure the Figma Developer MCP server is running on port 3333\n            </p>\n          )}\n        </div>\n        <div className=\"grid\">\n          <div className=\"col-12\">\n            <label htmlFor=\"figmaUrl\" className=\"block text-sm font-medium mb-2\">\n              Figma URL\n            </label>\n            <InputText\n              id=\"figmaUrl\"\n              value={figmaUrl}\n              onChange={handleFigmaUrlChange}\n              placeholder=\"https://figma.com/file/...\"\n              className=\"w-full mb-3\"\n            />\n            <Button\n              label=\"Fetch Figma Data\"\n              onClick={fetchFigmaData}\n              loading={loading}\n              disabled={!figmaUrl}\n              className=\"mb-3\"\n            />\n          </div>\n        </div>\n\n        {error && (\n          <div className=\"p-3 mb-3 border-round surface-100 border-1 border-red-200 bg-red-50\">\n            <i className=\"pi pi-exclamation-triangle text-red-500 mr-2\"></i>\n            {error}\n          </div>\n        )}\n\n        {figmaData && (\n          <div className=\"grid\">\n            <div className=\"col-12 md:col-6\">\n              <Card title=\"Figma Data\" className=\"h-full\">\n                <pre className=\"text-xs overflow-auto\" style={{ maxHeight: '300px' }}>\n                  {JSON.stringify(figmaData, null, 2)}\n                </pre>\n              </Card>\n            </div>\n            <div className=\"col-12 md:col-6\">\n              <Card \n                title=\"Generated PrimeReact Component\" \n                className=\"h-full\"\n                header={\n                  <div className=\"flex justify-content-between align-items-center\">\n                    <span>Generated Component</span>\n                    <Button\n                      icon=\"pi pi-copy\"\n                      onClick={copyToClipboard}\n                      size=\"small\"\n                      text\n                    />\n                  </div>\n                }\n              >\n                <InputTextarea\n                  value={generatedComponent}\n                  readOnly\n                  rows={15}\n                  className=\"w-full font-mono text-xs\"\n                />\n              </Card>\n            </div>\n          </div>\n        )}\n      </Card>\n\n      <Card title=\"How to Use\" className=\"mb-4\">\n        <div className=\"grid\">\n          <div className=\"col-12 md:col-6\">\n            <h3>Step 1: Get Figma URL</h3>\n            <p className=\"text-sm text-600\">\n              1. Open your Figma design<br/>\n              2. Select the component you want to convert<br/>\n              3. Copy the URL from your browser\n            </p>\n          </div>\n          <div className=\"col-12 md:col-6\">\n            <h3>Step 2: Generate Component</h3>\n            <p className=\"text-sm text-600\">\n              1. Paste the Figma URL above<br/>\n              2. Click \"Fetch Figma Data\"<br/>\n              3. Review the generated PrimeReact component\n            </p>\n          </div>\n        </div>\n      </Card>\n\n      <Card title=\"Supported Components\">\n        <div className=\"grid\">\n          <div className=\"col-12 md:col-4\">\n            <h4>Basic Components</h4>\n            <ul className=\"text-sm\">\n              <li>Buttons (with variants)</li>\n              <li>Input fields</li>\n              <li>Text elements</li>\n              <li>Cards</li>\n            </ul>\n          </div>\n          <div className=\"col-12 md:col-4\">\n            <h4>Layout Components</h4>\n            <ul className=\"text-sm\">\n              <li>Frames</li>\n              <li>Groups</li>\n              <li>Containers</li>\n            </ul>\n          </div>\n          <div className=\"col-12 md:col-4\">\n            <h4>Styling</h4>\n            <ul className=\"text-sm\">\n              <li>Colors and fills</li>\n              <li>Borders and strokes</li>\n              <li>Shadows and effects</li>\n              <li>Typography</li>\n            </ul>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n};\n\nexport default FigmaComponentBuilder; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}