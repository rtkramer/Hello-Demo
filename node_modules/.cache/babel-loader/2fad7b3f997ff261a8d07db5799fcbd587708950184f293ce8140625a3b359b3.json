{"ast":null,"code":"import React,{useState}from'react';import{Card}from'primereact/card';import{InputText}from'primereact/inputtext';import{Button}from'primereact/button';import{InputTextarea}from'primereact/inputtextarea';import{convertFigmaToPrimeReact,extractFigmaFileKey,extractNodeId}from'../utils/figmaToPrimeReact';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const FigmaComponentBuilder=()=>{const[figmaUrl,setFigmaUrl]=useState('');const[figmaData,setFigmaData]=useState(null);const[generatedComponent,setGeneratedComponent]=useState('');const[loading,setLoading]=useState(false);const[error,setError]=useState('');const handleFigmaUrlChange=e=>{setFigmaUrl(e.target.value);setError('');};const extractFigmaInfo=()=>{const fileKey=extractFigmaFileKey(figmaUrl);const nodeId=extractNodeId(figmaUrl);if(!fileKey){setError('Invalid Figma URL. Please provide a valid Figma file URL.');return null;}return{fileKey,nodeId};};const fetchFigmaData=async()=>{setLoading(true);setError('');try{const figmaInfo=extractFigmaInfo();if(!figmaInfo){setLoading(false);return;}// This would typically be done through the MCP server\n// For now, we'll simulate the process\nconsole.log('Fetching Figma data for:',figmaInfo);// Simulate API call delay\nawait new Promise(resolve=>setTimeout(resolve,1000));// Mock Figma data for demonstration\nconst mockFigmaData={type:'FRAME',name:'Example Component',children:[{type:'RECTANGLE',name:'Primary Button',fills:[{type:'SOLID',color:{r:0.2,g:0.4,b:0.8}}],cornerRadius:8,absoluteBoundingBox:{width:120,height:40}},{type:'TEXT',name:'Heading',characters:'Welcome to PrimeReact',style:{fontSize:24,fontWeight:600,fontFamily:'Inter'}}]};setFigmaData(mockFigmaData);generateComponent(mockFigmaData);}catch(err){setError('Failed to fetch Figma data. Please check your URL and try again.');console.error('Error fetching Figma data:',err);}finally{setLoading(false);}};const generateComponent=data=>{try{const component=convertFigmaToPrimeReact(data);// Convert React element to string representation\nconst componentString=`\nimport React from 'react';\nimport { ${getRequiredImports(data)} } from 'primereact/primereact';\n\nexport const GeneratedComponent = () => {\n  return (\n    ${componentToJSX(component)}\n  );\n};\n      `.trim();setGeneratedComponent(componentString);}catch(err){setError('Failed to generate component. Please check the Figma data.');console.error('Error generating component:',err);}};const getRequiredImports=data=>{const imports=new Set();const extractImports=node=>{if(node.type==='RECTANGLE'){if(node.name.toLowerCase().includes('button'))imports.add('Button');if(node.name.toLowerCase().includes('input'))imports.add('InputText');}if(node.type==='FRAME'&&node.name.toLowerCase().includes('card')){imports.add('Card');}if(node.children){node.children.forEach(extractImports);}};extractImports(data);return Array.from(imports).join(', ');};const componentToJSX=component=>{// This is a simplified conversion - in a real implementation,\n// you'd need a more sophisticated React element to JSX string converter\nreturn'<div>Generated Component</div>';};const copyToClipboard=()=>{navigator.clipboard.writeText(generatedComponent);};return/*#__PURE__*/_jsxs(\"div\",{className:\"p-4\",children:[/*#__PURE__*/_jsxs(Card,{title:\"Figma to PrimeReact Component Builder\",className:\"mb-4\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"grid\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"col-12\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"figmaUrl\",className:\"block text-sm font-medium mb-2\",children:\"Figma URL\"}),/*#__PURE__*/_jsx(InputText,{id:\"figmaUrl\",value:figmaUrl,onChange:handleFigmaUrlChange,placeholder:\"https://figma.com/file/...\",className:\"w-full mb-3\"}),/*#__PURE__*/_jsx(Button,{label:\"Fetch Figma Data\",onClick:fetchFigmaData,loading:loading,disabled:!figmaUrl,className:\"mb-3\"})]})}),error&&/*#__PURE__*/_jsxs(\"div\",{className:\"p-3 mb-3 border-round surface-100 border-1 border-red-200 bg-red-50\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"pi pi-exclamation-triangle text-red-500 mr-2\"}),error]}),figmaData&&/*#__PURE__*/_jsxs(\"div\",{className:\"grid\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"col-12 md:col-6\",children:/*#__PURE__*/_jsx(Card,{title:\"Figma Data\",className:\"h-full\",children:/*#__PURE__*/_jsx(\"pre\",{className:\"text-xs overflow-auto\",style:{maxHeight:'300px'},children:JSON.stringify(figmaData,null,2)})})}),/*#__PURE__*/_jsx(\"div\",{className:\"col-12 md:col-6\",children:/*#__PURE__*/_jsx(Card,{title:\"Generated PrimeReact Component\",className:\"h-full\",header:/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-content-between align-items-center\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"Generated Component\"}),/*#__PURE__*/_jsx(Button,{icon:\"pi pi-copy\",onClick:copyToClipboard,size:\"small\",text:true})]}),children:/*#__PURE__*/_jsx(InputTextarea,{value:generatedComponent,readOnly:true,rows:15,className:\"w-full font-mono text-xs\"})})})]})]}),/*#__PURE__*/_jsx(Card,{title:\"How to Use\",className:\"mb-4\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"grid\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"col-12 md:col-6\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Step 1: Get Figma URL\"}),/*#__PURE__*/_jsxs(\"p\",{className:\"text-sm text-600\",children:[\"1. Open your Figma design\",/*#__PURE__*/_jsx(\"br\",{}),\"2. Select the component you want to convert\",/*#__PURE__*/_jsx(\"br\",{}),\"3. Copy the URL from your browser\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"col-12 md:col-6\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Step 2: Generate Component\"}),/*#__PURE__*/_jsxs(\"p\",{className:\"text-sm text-600\",children:[\"1. Paste the Figma URL above\",/*#__PURE__*/_jsx(\"br\",{}),\"2. Click \\\"Fetch Figma Data\\\"\",/*#__PURE__*/_jsx(\"br\",{}),\"3. Review the generated PrimeReact component\"]})]})]})}),/*#__PURE__*/_jsx(Card,{title:\"Supported Components\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"grid\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"col-12 md:col-4\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Basic Components\"}),/*#__PURE__*/_jsxs(\"ul\",{className:\"text-sm\",children:[/*#__PURE__*/_jsx(\"li\",{children:\"Buttons (with variants)\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Input fields\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Text elements\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Cards\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"col-12 md:col-4\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Layout Components\"}),/*#__PURE__*/_jsxs(\"ul\",{className:\"text-sm\",children:[/*#__PURE__*/_jsx(\"li\",{children:\"Frames\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Groups\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Containers\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"col-12 md:col-4\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Styling\"}),/*#__PURE__*/_jsxs(\"ul\",{className:\"text-sm\",children:[/*#__PURE__*/_jsx(\"li\",{children:\"Colors and fills\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Borders and strokes\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Shadows and effects\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Typography\"})]})]})]})})]});};export default FigmaComponentBuilder;","map":{"version":3,"names":["React","useState","Card","InputText","Button","InputTextarea","convertFigmaToPrimeReact","extractFigmaFileKey","extractNodeId","jsx","_jsx","jsxs","_jsxs","FigmaComponentBuilder","figmaUrl","setFigmaUrl","figmaData","setFigmaData","generatedComponent","setGeneratedComponent","loading","setLoading","error","setError","handleFigmaUrlChange","e","target","value","extractFigmaInfo","fileKey","nodeId","fetchFigmaData","figmaInfo","console","log","Promise","resolve","setTimeout","mockFigmaData","type","name","children","fills","color","r","g","b","cornerRadius","absoluteBoundingBox","width","height","characters","style","fontSize","fontWeight","fontFamily","generateComponent","err","data","component","componentString","getRequiredImports","componentToJSX","trim","imports","Set","extractImports","node","toLowerCase","includes","add","forEach","Array","from","join","copyToClipboard","navigator","clipboard","writeText","className","title","htmlFor","id","onChange","placeholder","label","onClick","disabled","maxHeight","JSON","stringify","header","icon","size","text","readOnly","rows"],"sources":["/Users/richardkramer/Sites/prime-react/src/components/FigmaComponentBuilder.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Card } from 'primereact/card';\nimport { InputText } from 'primereact/inputtext';\nimport { Button } from 'primereact/button';\nimport { InputTextarea } from 'primereact/inputtextarea';\nimport { convertFigmaToPrimeReact, extractFigmaFileKey, extractNodeId } from '../utils/figmaToPrimeReact';\n\nconst FigmaComponentBuilder = () => {\n  const [figmaUrl, setFigmaUrl] = useState('');\n  const [figmaData, setFigmaData] = useState(null);\n  const [generatedComponent, setGeneratedComponent] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const handleFigmaUrlChange = (e) => {\n    setFigmaUrl(e.target.value);\n    setError('');\n  };\n\n  const extractFigmaInfo = () => {\n    const fileKey = extractFigmaFileKey(figmaUrl);\n    const nodeId = extractNodeId(figmaUrl);\n    \n    if (!fileKey) {\n      setError('Invalid Figma URL. Please provide a valid Figma file URL.');\n      return null;\n    }\n    \n    return { fileKey, nodeId };\n  };\n\n  const fetchFigmaData = async () => {\n    setLoading(true);\n    setError('');\n    \n    try {\n      const figmaInfo = extractFigmaInfo();\n      if (!figmaInfo) {\n        setLoading(false);\n        return;\n      }\n\n      // This would typically be done through the MCP server\n      // For now, we'll simulate the process\n      console.log('Fetching Figma data for:', figmaInfo);\n      \n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Mock Figma data for demonstration\n      const mockFigmaData = {\n        type: 'FRAME',\n        name: 'Example Component',\n        children: [\n          {\n            type: 'RECTANGLE',\n            name: 'Primary Button',\n            fills: [{ type: 'SOLID', color: { r: 0.2, g: 0.4, b: 0.8 } }],\n            cornerRadius: 8,\n            absoluteBoundingBox: { width: 120, height: 40 }\n          },\n          {\n            type: 'TEXT',\n            name: 'Heading',\n            characters: 'Welcome to PrimeReact',\n            style: {\n              fontSize: 24,\n              fontWeight: 600,\n              fontFamily: 'Inter'\n            }\n          }\n        ]\n      };\n      \n      setFigmaData(mockFigmaData);\n      generateComponent(mockFigmaData);\n      \n    } catch (err) {\n      setError('Failed to fetch Figma data. Please check your URL and try again.');\n      console.error('Error fetching Figma data:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const generateComponent = (data) => {\n    try {\n      const component = convertFigmaToPrimeReact(data);\n      \n      // Convert React element to string representation\n      const componentString = `\nimport React from 'react';\nimport { ${getRequiredImports(data)} } from 'primereact/primereact';\n\nexport const GeneratedComponent = () => {\n  return (\n    ${componentToJSX(component)}\n  );\n};\n      `.trim();\n      \n      setGeneratedComponent(componentString);\n    } catch (err) {\n      setError('Failed to generate component. Please check the Figma data.');\n      console.error('Error generating component:', err);\n    }\n  };\n\n  const getRequiredImports = (data) => {\n    const imports = new Set();\n    \n    const extractImports = (node) => {\n      if (node.type === 'RECTANGLE') {\n        if (node.name.toLowerCase().includes('button')) imports.add('Button');\n        if (node.name.toLowerCase().includes('input')) imports.add('InputText');\n      }\n      if (node.type === 'FRAME' && node.name.toLowerCase().includes('card')) {\n        imports.add('Card');\n      }\n      if (node.children) {\n        node.children.forEach(extractImports);\n      }\n    };\n    \n    extractImports(data);\n    return Array.from(imports).join(', ');\n  };\n\n  const componentToJSX = (component) => {\n    // This is a simplified conversion - in a real implementation,\n    // you'd need a more sophisticated React element to JSX string converter\n    return '<div>Generated Component</div>';\n  };\n\n  const copyToClipboard = () => {\n    navigator.clipboard.writeText(generatedComponent);\n  };\n\n  return (\n    <div className=\"p-4\">\n      <Card title=\"Figma to PrimeReact Component Builder\" className=\"mb-4\">\n        <div className=\"grid\">\n          <div className=\"col-12\">\n            <label htmlFor=\"figmaUrl\" className=\"block text-sm font-medium mb-2\">\n              Figma URL\n            </label>\n            <InputText\n              id=\"figmaUrl\"\n              value={figmaUrl}\n              onChange={handleFigmaUrlChange}\n              placeholder=\"https://figma.com/file/...\"\n              className=\"w-full mb-3\"\n            />\n            <Button\n              label=\"Fetch Figma Data\"\n              onClick={fetchFigmaData}\n              loading={loading}\n              disabled={!figmaUrl}\n              className=\"mb-3\"\n            />\n          </div>\n        </div>\n\n        {error && (\n          <div className=\"p-3 mb-3 border-round surface-100 border-1 border-red-200 bg-red-50\">\n            <i className=\"pi pi-exclamation-triangle text-red-500 mr-2\"></i>\n            {error}\n          </div>\n        )}\n\n        {figmaData && (\n          <div className=\"grid\">\n            <div className=\"col-12 md:col-6\">\n              <Card title=\"Figma Data\" className=\"h-full\">\n                <pre className=\"text-xs overflow-auto\" style={{ maxHeight: '300px' }}>\n                  {JSON.stringify(figmaData, null, 2)}\n                </pre>\n              </Card>\n            </div>\n            <div className=\"col-12 md:col-6\">\n              <Card \n                title=\"Generated PrimeReact Component\" \n                className=\"h-full\"\n                header={\n                  <div className=\"flex justify-content-between align-items-center\">\n                    <span>Generated Component</span>\n                    <Button\n                      icon=\"pi pi-copy\"\n                      onClick={copyToClipboard}\n                      size=\"small\"\n                      text\n                    />\n                  </div>\n                }\n              >\n                <InputTextarea\n                  value={generatedComponent}\n                  readOnly\n                  rows={15}\n                  className=\"w-full font-mono text-xs\"\n                />\n              </Card>\n            </div>\n          </div>\n        )}\n      </Card>\n\n      <Card title=\"How to Use\" className=\"mb-4\">\n        <div className=\"grid\">\n          <div className=\"col-12 md:col-6\">\n            <h3>Step 1: Get Figma URL</h3>\n            <p className=\"text-sm text-600\">\n              1. Open your Figma design<br/>\n              2. Select the component you want to convert<br/>\n              3. Copy the URL from your browser\n            </p>\n          </div>\n          <div className=\"col-12 md:col-6\">\n            <h3>Step 2: Generate Component</h3>\n            <p className=\"text-sm text-600\">\n              1. Paste the Figma URL above<br/>\n              2. Click \"Fetch Figma Data\"<br/>\n              3. Review the generated PrimeReact component\n            </p>\n          </div>\n        </div>\n      </Card>\n\n      <Card title=\"Supported Components\">\n        <div className=\"grid\">\n          <div className=\"col-12 md:col-4\">\n            <h4>Basic Components</h4>\n            <ul className=\"text-sm\">\n              <li>Buttons (with variants)</li>\n              <li>Input fields</li>\n              <li>Text elements</li>\n              <li>Cards</li>\n            </ul>\n          </div>\n          <div className=\"col-12 md:col-4\">\n            <h4>Layout Components</h4>\n            <ul className=\"text-sm\">\n              <li>Frames</li>\n              <li>Groups</li>\n              <li>Containers</li>\n            </ul>\n          </div>\n          <div className=\"col-12 md:col-4\">\n            <h4>Styling</h4>\n            <ul className=\"text-sm\">\n              <li>Colors and fills</li>\n              <li>Borders and strokes</li>\n              <li>Shadows and effects</li>\n              <li>Typography</li>\n            </ul>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n};\n\nexport default FigmaComponentBuilder; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}